<?xml version="1.0" encoding="utf-8"?>

<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" autoReload="true">
	<variable name="logfolder" value="${gdc:item=logfolder}" />

	<targets>
    <target name="managementConsole" xsi:type="ManagementConsole" layout="${date:format=HH\:mm\:ss.fff} ${level} [${threadid}][${threadname}] [${logger:shortName=true}] ${message} ${exception:format=tostring}" />
	<target name="instanceLogs" xsi:type="AsyncWrapper">
		<target name="console" xsi:type="ColoredConsole" layout="${message}"
				useDefaultRowHighlightingRules="false">
			<highlight-row condition="level == LogLevel.Debug" foregroundColor="DarkGray" />
			<highlight-row condition="level == LogLevel.Info" foregroundColor="White" />
			<highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
			<highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
			<highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
			<highlight-word foregroundColor="Blue" regex="^.*?:" />
		</target>
	</target>



		<target name="asyncFileWriter" xsi:type="AsyncWrapper">
			<target name="logfile" xsi:type="File" autoFlush="true" encoding="utf-8" fileName="${logfolder}\${shortdate}.log" layout="${longdate} ${uppercase:inner=${pad:padCharacter= :padding=-5:inner=${level}}} [${threadid}][${threadname}] [${logger:shortName=true}] ${message} ${exception:format=tostring}" />
		</target>

		<target name="asyncConfigsFileWriter" xsi:type="AsyncWrapper">
			<target name="logfile" xsi:type="File" autoFlush="true" encoding="utf-8" fileName="${logfolder}\${shortdate}.configs.log" layout="${longdate} ${uppercase:inner=${pad:padCharacter= :padding=-5:inner=${level}}} [${threadid}][${threadname}] [${logger:shortName=true}] ${message} ${exception:format=tostring}" />
		</target>
		<target name="asyncCardsFileWriter" xsi:type="AsyncWrapper">
			<target name="logfile" xsi:type="File" autoFlush="true" encoding="utf-8" fileName="${logfolder}\${shortdate}.cards.log" layout="${longdate} ${uppercase:inner=${pad:padCharacter= :padding=-5:inner=${level}}} [${threadid}][${threadname}] [${logger:shortName=true}] ${message} ${exception:format=tostring}" />
		</target>
		<target name="asyncDiasoftFileWriter" xsi:type="AsyncWrapper">
			<target name="logfile" xsi:type="File" autoFlush="true" encoding="utf-8" fileName="${logfolder}\${shortdate}.diasoft.log" layout="${longdate} ${uppercase:inner=${pad:padCharacter= :padding=-5:inner=${level}}} [${threadid}][${threadname}] [${logger:shortName=true}] ${message} ${exception:format=tostring}" />
		</target>
    	<target name="asyncConsole" xsi:type="AsyncWrapper">
			<target name="console" xsi:type="ColoredConsole" layout="${date:format=HH\:mm\:ss.fff} ${level} [${threadid}][${threadname}] [${logger:shortName=true}] ${message} ${exception:format=tostring}"
					useDefaultRowHighlightingRules="false">
				<highlight-row condition="level == LogLevel.Debug" foregroundColor="DarkGray" />
				<highlight-row condition="level == LogLevel.Info" foregroundColor="White" />
				<highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
				<highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
				<highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
			</target>
		</target>
    
		<target name="asyncDebug" xsi:type="AsyncWrapper">
			<target name="debug" xsi:type="Debug" layout="${date:format=HH\:mm\:ss.fff} ${level} [${threadid}][${threadname}] [${logger:shortName=true}] ${message} ${exception:format=tostring}" />
		</target>

		<target name="null" xsi:type="Null" />
	</targets>

	<rules>
		<logger name="*.LogCache" writeTo="instanceLogs" final="true" />

		<!-- <logger name="NHibernate.SQL" minlevel="Debug" writeTo="asyncFileWriter" final="true" />-->
		<logger name="NHibernate.*" writeTo="null" final="true" />
		<logger name="*.ExchangeRatesMultiplier" writeTo="null" final="true" />
		<logger name="*.LegacyRemoteConfigurationProvider" writeTo="asyncConfigsFileWriter" final="true" />
		<logger name="*.CardsListener" writeTo="asyncCardsFileWriter" final="false" >
			<filters>
				<when condition="level == LogLevel.Debug" action="LogFinal" />
				<when condition="level != LogLevel.Debug" action="Log" />
			</filters>
		</logger>
		<logger name="*.CardsAdapter" writeTo="asyncCardsFileWriter" final="false" >
			<filters>
				<when condition="level == LogLevel.Debug" action="LogFinal" />
				<when condition="level != LogLevel.Debug" action="Log" />
			</filters>
		</logger>
		<logger name="*.DiasoftListener" writeTo="asyncDiasoftFileWriter" final="false" >
			<filters>
				<when condition="level == LogLevel.Debug" action="LogFinal" />
				<when condition="level != LogLevel.Debug" action="Log" />
			</filters>
		</logger>
		<logger name="*.DiasoftAdapter" writeTo="asyncDiasoftFileWriter" final="false" >
			<filters>
				<when condition="level == LogLevel.Debug" action="LogFinal" />
				<when condition="level != LogLevel.Debug" action="Log" />
			</filters>
		</logger>
		<logger name="*" minlevel="Debug" writeTo="asyncFileWriter" />
		<logger name="*" minlevel="Debug" writeTo="asyncConsole" />
		<logger name="*" minlevel="Trace" writeTo="asyncDebug" />
		<logger name="*" minlevel="Trace" writeTo="managementConsole" />
	</rules>

</nlog>